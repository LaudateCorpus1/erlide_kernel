buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "com.github.jlouns.cpe" version "0.4.1"
  id "de.undercouch.download" version "2.1.0"
  id 'com.google.osdetector' version "1.4.0"
}

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Pattern
import java.util.regex.Matcher

def otpVersions = [
    "r15": "R15B03-1",
    "r16": "R16B03",
    "17": "17.5",
    "18": "18.3"
]

subprojects {

    ext {
        context = detect_erlide_context(projectDir)
        otp_version = detect_otp(projectDir)
        otpHome = "${System.getProperty('user.home')}/erlide_tools/${otpVersions[otp_version]}"
    }

    task clean(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${System.getProperty("user.home")}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar", '-v', 'clean'
    }

    task build(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${System.getProperty("user.home")}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar", '-v', 'compile'
    }

    task test(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${System.getProperty('user.home')}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar", '-v', 'skip_deps=true', 'eunit'
    }

}

task assemble_base(type: Zip) {
    baseName 'erlide_kernel'
    subprojects.findAll { !it.name.contains('debugger') }.each { subproject ->
        dependsOn subproject.build
        into("${subproject.context}") {
            from subproject.file('ebin')
            exclude '.marker'
        }
    }
}

task assemble_debugger(type: Zip) {
    baseName 'erlide_kernel_debugger'
    subprojects.findAll { it.name.endsWith('debugger') }.each { subproject ->
        dependsOn subproject.build
        into("${subproject.context}") {
            from subproject.file('ebin')
            exclude '.marker'
        }
    }
    subprojects.findAll { it.name.contains('debugger_') }.each { subproject ->
        dependsOn subproject.build
        into("${subproject.context}/${subproject.otp_version}") {
            from subproject.file('ebin')
            exclude '.marker'
        }
    }
}

task assemble {
     dependsOn tasks.withType(Zip)
}

String detect_otp(File dir) {
    byte[] encoded = Files.readAllBytes(Paths.get("${dir}/rebar.config"))
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("require_otp_vsn, *\"(R?[0-9]+).*\"")
    Matcher m = p.matcher(text)
    if(m.find()) {
        String r = m.group(1)
        return r.toLowerCase()
    }
    return "r15"
}

String detect_erlide_context(File dir) {
    File srcDir = new File(dir, 'src')
    File appSrc = srcDir.listFiles().find { it.name.endsWith('.app.src') }
    if(appSrc==null) return "error"

    java.nio.file.Path path = Paths.get(appSrc.path)
    byte[] encoded = Files.readAllBytes(path)
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("\\{erlide_context, *([^\\}]+)\\}")
    Matcher m = p.matcher(text)
    if(m.find())
        return m.group(1)
    return "common"
}

String detect_version(File dir) {
    File srcDir = new File(dir, 'src')
    File appSrc = srcDir.listFiles().find { it.name.endsWith('.app.src') }
    if(appSrc==null) return "error"

    java.nio.file.Path path = Paths.get(appSrc.path)
    byte[] encoded = Files.readAllBytes(path)
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("\\{vsn, *([^\\}]+)\\}")
    Matcher m = p.matcher(text)
    if(m.find())
        return m.group(1)
    return "0.0.0"
}

List<String> run(cmds) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmds
        standardOutput = stdout
    }
    stdout.toString().readLines()
}

List<String> kerl(cmds) {
    run(["${System.getProperty('user.home')}/erlide_tools/kerl"]+cmds)
}

String kerlBuildName(vsn) {
    def r = kerl(['list', 'builds']).find {
        def a = it.split(',')
        a[0] == vsn
    }
    r? r.split(',')[1] : null
}

String kerlInstallationPath(name) {
    def r = kerl(['list', 'installations']).find {
        def a = it.split(' ')
        a[0] == name
    }
    r? r.split(' ')[1] : null
}

task setup(){
    println ("Setup Erlang tools - this might take a while, as we need to build 3 or 4 Erlang runtimes...")
    println("Download kerl")
    downloadTool('kerl', 'https://raw.githubusercontent.com/kerl/kerl/master/kerl',
        true, "${System.getProperty('user.home')}/erlide_tools")
    for(vsn in otpVersions.keySet()){
        def name = kerlBuildName(otpVersions[vsn])
        if(name == null) {
            println("Build $vsn")
            name = otpVersions[vsn]
            kerl(['build', name, name])
        } else {
            println("Skip build $vsn ($name)")
        }
        def path = kerlInstallationPath(name)
        if(path == null) {
            println("Install $vsn")
            path = "${System.getProperty('user.home')}/erlide_tools/${name}"
            kerl(['install', name, path])
        } else {
            println("Skip install $vsn ($path)")
        }
    }
    println "Done."
}

// **********************************************************************

boolean isLinux() {
    OperatingSystem.current().isLinux()
}
boolean isWindows() {
    OperatingSystem.current().isWindows()
}
boolean isMacOsX() {
    OperatingSystem.current().isMacOsX()
}

List otpRoots = [
    "${System.env.HOME}/.kerl/installs",
    "${rootDir}/.tools"
]

Map versions = [
    "ubuntu": ["trusty", "precise", "vivid"],
    "debian": ["wheezy"],
    "osx": ["10.10"]
]

Map qualifiers = [
    "windows": [qualifier: "windows", version: null, ext: "exe"],
    "ubuntu": [qualifier: "ubuntu", version: "trusty", ext: "deb"],
    "debian": [qualifier: "debian", version: "wheezy", ext: "deb"],
    "osx": [qualifier: "osx", version: "10.10", ext: "dmg"]
]

String otpArchiveName(String version, String os, String osversion, String ext) {
    String osver = osversion==null? os: "$os~$osversion"
    return "esl-erlang_${version}-1~${osver}_amd64.${ext}"
}

void setupTools() {
    new File("${rootDir}/.tools").mkdir()

    installOtp()
}

String osPath(String path) {
    "${new File(path)}"
}

void downloadTool(String name, String url, boolean exec, String destDir) {
    if(new File("${destDir}/${name}").exists()) {
        println "Tool $name is already downloaded."
    } else {
        println "Downloading tool $name..."
        download {
            src url
            dest "$destDir/$name"
        }
    }
    if(exec) ant.chmod(dir: "$destDir", perm:"ug+x", includes:"$name")
}

void installOtp() {
    String archiveName = downloadOtp()

    String destDir = osPath("$rootDir/.tools/otp18")
    println "INSTALL $archiveName in $destDir"
    if(new File(destDir).exists()){
        println "Skip, already installed."
    } else {
        if(isLinux()) {
            //exec {
            //    commandLine 'cmd', '/c', archiveName, '/S', "/D=$destDir"
            //}
        }else if(isWindows()) {
            //exec {
            //  commandLine 'cmd', '/c', archiveName, '/S', "/D=$destDir"
            //}
        } else {
            println "we don't support ${OperatingSystem.current()}"
        }
    }
}

String downloadOtp() {
    String archiveName = null
    if(isLinux()) {
            archiveName = null
    }else if(isWindows()) {
        archiveName  = otpArchiveName("18.2", "windows", null, "exe")
    } else {
        println "we don't support ${OperatingSystem.current()}"
    }
    if(archiveName != null) {
        //downloadTool archiveName, "http://packages.erlang-solutions.com/site/esl/esl-erlang/FLAVOUR_1_general/$archiveName", false, "${rootDir}/.tools"
    }
    archiveName
}


