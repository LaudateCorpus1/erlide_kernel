buildscript {
  repositories {
    mavenLocal()
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
}

plugins {
  id "de.undercouch.download" version "2.1.0"
}

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.regex.Pattern
import java.util.regex.Matcher

def otpVersions = [
    //"r15": "R15B03-1",
    "r16": "R16B03",
    "17": "17.5",
    "18": "18.3"
]

subprojects {

    ext {
        context = detect_erlide_context(projectDir)
        otp_version = detect_otp(projectDir)
        codeDirs = []
        otpHome = "${System.getProperty('user.home')}/erlide_tools/${otpVersions[otp_version]}"
    }

    task clean(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${System.getProperty("user.home")}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar3", 'clean'
    }

    task build(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${System.getProperty("user.home")}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar3", 'compile'
    }

    task test(type: Exec) {
        dependsOn ':setup'
        workingDir = projectDir
        environment['ERL_LIBS'] = "${projectDir}/../erlide_kernel_common/_build/test/lib:${System.getProperty("user.home")}/erlide_tools:${environment['ERL_LIBS']}"
        commandLine "${otpHome}/bin/escript", "${rootDir}/rebar3", 'do', 'eunit,cover'
    }

}

task assemble(type: Zip) {
    destinationDir file('target')
    baseName 'org.erlide.kernel'
    subprojects.findAll { !it.name.contains('debugger') }.each { subproject ->
        dependsOn subproject.build
        def app = detect_app_name(subproject.projectDir)
        into("${subproject.context}") {
            from subproject.file("_build/default/lib/")
            include "**/*.beam"
            include "**/*.app"
            includeEmptyDirs = false
            eachFile { fcp->
                if (fcp.isDirectory()) { fcp.exclude(); println(fcp) }
                fcp.path = "${subproject.context}/${fcp.name}"
            }
        }
        subproject.codeDirs.add([
                otp_version: subproject.otp_version.toUpperCase(),
                path: "${subproject.context}",
                context: subproject.context
            ])
    }
    subprojects.findAll { it.name.endsWith('debugger') }.each { subproject ->
        dependsOn subproject.build
        def app = detect_app_name(subproject.projectDir)
        into("${subproject.context}") {
            from subproject.file("_build/default/lib/")
            include "**/*.beam"
            include "**/*.app"
            includeEmptyDirs = false
            eachFile { fcp->
                if (fcp.isDirectory()) fcp.exclude()
                fcp.path = "${subproject.context}/${fcp.name}"
            }
        }
        subproject.codeDirs.add([
                otp_version: subproject.otp_version.toUpperCase(),
                path: "${subproject.context}",
                context: subproject.context
            ])
    }
    subprojects.findAll { it.name.contains('debugger_') }.each { subproject ->
        dependsOn subproject.build
        def app = detect_app_name(subproject.projectDir)
        into("${subproject.context}/${subproject.otp_version}") {
            from subproject.file("_build/default/lib/")
            include "**/*.beam"
            include "**/*.app"
            includeEmptyDirs = false
            eachFile { fcp->
                if (fcp.isDirectory()) fcp.exclude()
                fcp.path = "${subproject.context}/${subproject.otp_version}/${fcp.name}"
            }
        }
        subproject.codeDirs.add([
                otp_version: subproject.otp_version.toUpperCase(),
                path: "${subproject.context}/${subproject.otp_version}",
                context: subproject.context
            ])
    }
    into("") {
        from file("org.erlide.kernel")
        def env = loadEnvironment()
        expand env
    }
    outputs.upToDateWhen { false }
}

def loadEnvironment() {
    def properties = new Properties()
    properties.codeDirs = subprojects.collect { it.codeDirs }.flatten().unique()
    properties
}

String detect_otp(File dir) {
    byte[] encoded = Files.readAllBytes(Paths.get("${dir}/rebar.config"))
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("require_otp_vsn, *\"(R?[0-9]+).*\"")
    Matcher m = p.matcher(text)
    if(m.find()) {
        String r = m.group(1)
        return r.toLowerCase()
    }
    return "r16"
}

String detect_app_name(File dir) {
    File srcDir = new File(dir, 'src')
    File appSrc = srcDir.listFiles().find { it.name.endsWith('.app.src') }
    if(appSrc==null) return "error"

    java.nio.file.Path path = Paths.get(appSrc.path)
    byte[] encoded = Files.readAllBytes(path)
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("\\{application, *([^,]+),")
    Matcher m = p.matcher(text)
    if(m.find())
        return m.group(1)
    return "unknown"
}

String detect_erlide_context(File dir) {
    File srcDir = new File(dir, 'src')
    File appSrc = srcDir.listFiles().find { it.name.endsWith('.app.src') }
    if(appSrc==null) return "error"

    java.nio.file.Path path = Paths.get(appSrc.path)
    byte[] encoded = Files.readAllBytes(path)
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("\\{erlide_context, *([^\\}]+)\\}")
    Matcher m = p.matcher(text)
    if(m.find())
        return m.group(1)
    return "common"
}

String detect_version(File dir) {
    File srcDir = new File(dir, 'src')
    File appSrc = srcDir.listFiles().find { it.name.endsWith('.app.src') }
    if(appSrc==null) return "error"

    java.nio.file.Path path = Paths.get(appSrc.path)
    byte[] encoded = Files.readAllBytes(path)
    String text = new String(encoded, 'UTF-8')
    Pattern p = Pattern.compile("\\{vsn, \"*([^\"]+)\"\\}")
    Matcher m = p.matcher(text)
    if(m.find())
        return m.group(1)
    return "0.0.0"
}

List<String> run(cmds) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine cmds
        standardOutput = stdout
    }
    stdout.toString().readLines()
}

List<String> kerl(cmds) {
    run(["${System.getProperty('user.home')}/erlide_tools/kerl"]+cmds)
}

String kerlBuildName(vsn) {
    def r = kerl(['list', 'builds']).find {
        def a = it.split(',')
        a[0] == vsn
    }
    r? r.split(',')[1] : null
}

String kerlInstallationPath(name) {
    def r = kerl(['list', 'installations']).find {
        def a = it.split(' ')
        a[0] == name
    }
    r? r.split(' ')[1] : null
}

task setup(){
    println ("Setup Erlang tools - the first time, this might take up to 30 minutes, as we need to build 3 or 4 Erlang runtimes...")
    println("Download kerl")
    downloadTool('kerl', 'https://raw.githubusercontent.com/kerl/kerl/master/kerl',
        true, "${System.getProperty('user.home')}/erlide_tools")
    kerl(['update', 'releases'])
    for(vsn in otpVersions.keySet()){
        def name = kerlBuildName(otpVersions[vsn])
        if(name == null) {
            println("Build OTP $name")
            name = otpVersions[vsn]
            kerl(['build', name, name])
        } else {
            println("OTP $name already built")
        }
        def path = kerlInstallationPath(name)
        if(path == null) {
            println("Install OTP $name")
            path = "${System.getProperty('user.home')}/erlide_tools/${name}"
            kerl(['install', name, path])
        } else {
            println("OTP $name ($path) already installed")
        }
    }
    println "Done."
}

void downloadTool(String name, String url, boolean exec, String destDir, boolean force=true) {
    if(!force && new File("${destDir}/${name}").exists()) {
        println "Tool $name is already downloaded."
        return
    }
    println "Downloading tool $name..."
    download {
        src url
        dest "$destDir/$name"
    }
    if(exec)
        ant.chmod(dir: destDir, perm:"ug+x", includes: name)
}
